import numpy as np 
import matplotlib.pyplot as plt

def simulate_brownian(T,n_steps, cov = np.identity(1)):
    L = np.linalg.cholesky(cov)
    dt = T/n_steps
    d = cov.shape[0]
    V = np.zeros([d,n_steps+1])
    eps = np.random.randn(d,n_steps)
    for i in range(0,n_steps):
        V[:,i+1] = V[:,i] + sqrt(dt)*L @ eps[:'i]
    return V 

# 2D wiener process 

rho = 0 
P = np.array([[1,rho],[rho,1]])
W = simulate_brownian(1,5000,P)
ax.plot(W[0,:],W[1,:])
ax.set_aspect('equal')
ax.set_xlabel('$x_1$')
ax.set_ylabel('$x_2$'); #